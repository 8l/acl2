; VL Verilog Toolkit
; Copyright (C) 2008-2014 Centaur Technology
;
; Contact:
;   Centaur Technology Formal Verification Group
;   7600-C N. Capital of Texas Highway, Suite 300, Austin, TX 78731, USA.
;   http://www.centtech.com/
;
; License: (An MIT/X11-style license)
;
;   Permission is hereby granted, free of charge, to any person obtaining a
;   copy of this software and associated documentation files (the "Software"),
;   to deal in the Software without restriction, including without limitation
;   the rights to use, copy, modify, merge, publish, distribute, sublicense,
;   and/or sell copies of the Software, and to permit persons to whom the
;   Software is furnished to do so, subject to the following conditions:
;
;   The above copyright notice and this permission notice shall be included in
;   all copies or substantial portions of the Software.
;
;   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
;   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
;   DEALINGS IN THE SOFTWARE.
;
; Original authors: Jared Davis <jared@centtech.com>
;                   Sol Swords <sswords@centtech.com>

(in-package "VL")

(include-book "centaur/vl/mlib/blocks" :dir :system)
(include-book "centaur/fty/visitor" :dir :system)

(local (std::add-default-post-define-hook :fix))

(local (include-book "centaur/vl/util/default-hints" :dir :system))

;; (local (in-theory (disable 
;;         (:REWRITE VL-DATATYPE-PDIMS-WHEN-VL-CORETYPE)
;;         (:REWRITE VL-DATATYPE-PDIMS-WHEN-VL-ENUM)
;;         (:REWRITE VL-DATATYPE-PDIMS-WHEN-VL-STRUCT)
;;         (:REWRITE VL-DATATYPE-PDIMS-WHEN-VL-UNION)
;;         (:REWRITE VL-DATATYPE-PDIMS-WHEN-VL-USERTYPE)
;;         (:REWRITE VL-DATATYPE-UDIMS-WHEN-VL-CORETYPE)
;;         (:REWRITE VL-DATATYPE-UDIMS-WHEN-VL-ENUM)
;;         (:REWRITE VL-DATATYPE-UDIMS-WHEN-VL-STRUCT)
;;         (:REWRITE VL-DATATYPE-UDIMS-WHEN-VL-UNION)
;;         (:REWRITE VL-DATATYPE-UDIMS-WHEN-VL-USERTYPE)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-BINARY)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-CALL)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-CAST)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-CONCAT)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-INDEX)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-INSIDE)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-MINTYPMAX)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-MULTICONCAT)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-PATTERN)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-QMARK)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-SPECIAL)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-STREAM)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-TAGGED)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-UNARY)
;;         (:REWRITE VL-EXPR-TYPE-WHEN-VL-VALUE))))

(local (in-theory (disable (tau-system)
                           vl-warninglist-p-when-subsetp-equal
                           vl-warninglist-p-when-not-consp
                           double-containment
                           not)))

(fty::deflist vl-scopeexprlist :elt-type vl-scopeexpr)

(define vl-expr-toplevel-functions-called ((x vl-expr-p))
  :returns (fnnames (and (vl-scopeexprlist-p fnnames)
                         (setp fnnames)))
  :measure (vl-expr-count x)
  (vl-expr-case x
    :vl-call (if x.systemp
                 nil
               (insert x.name nil))
    :otherwise nil))

(fty::defvisitor-template functions-called ((x :object))
  :returns (fns (:join (union fns1 fns)
                 :tmp-var fns1
                 :initial nil)
                (and (vl-scopeexprlist-p fns)
                     (setp fns)))
  :type-fns ((vl-expr vl-expr-functions-called)) ;; not defined yet!
  ;; Skip atts because they're not semantically relevant, generates bc they're
  ;; in a different scope
  :field-fns ((atts :skip)
              (generates :skip))
  :fnname-template <type>-functions-called)

(fty::defvisitor vl-datatype-functions-called
  :type expressions-and-datatypes  :template functions-called
  :measure (two-nats-measure :count 0)

  ;; The autogenerated vl-expr visitor becomes vl-expr-subexpr-functions-called,
  ;; which traverses it but doesn't get the top-level reference.  This fixes it
  ;; by adding in the toplevel reference, if any.
  (define vl-expr-functions-called ((x vl-expr-p))
    :returns (fns (and (vl-scopeexprlist-p fns)
                          (setp fns)))
    :measure (two-nats-measure (vl-expr-count x) 1)
    (union (vl-expr-toplevel-functions-called x)
           (vl-expr-subexpr-functions-called x)))

  :renames ((vl-expr vl-expr-subexpr-functions-called)))

(fty::defvisitors vl-functions-called
  :template functions-called
  :types (vl-design vl-genblob))

